name: Build and deploy
on:
  push:
    tags:
      - 'v*'
#    branches: [deploy, test]

jobs:
  tests:
    if: |
      contains(github.ref_name, 'test') ||
      (!contains(github.ref_name, 'deploy-only') && contains(github.ref_name, 'test')) ||
      !contains(github.ref_name, 'deploy-only')
    name: Test
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        python-version: ['3.11']

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 5s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432


    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          if [ -f ./todolist/requirements.txt ]; then pip install -r ./todolist/requirements.txt; fi

      - name: Run tests
          cd ./todolist
          python manage.py test -v 2

  build_and_push:
    if: "!contains(github.ref_name, 'deploy-only') && !contains(github.ref_name, 'test-only')"
    name: Build and push
    runs-on: main-linux

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.API_NAME }}
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: ./todolist/.
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
#      - name: Build api image
#        run: |
#          cd todolist
#          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.API_NAME }}:$GITHUB_REF_NAME-$GITHUB_RUN_ID -f Dockerfile .
#      - name: docker login
#        run: echo ${{ secrets.DOCKER_TOKEN }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
#      - name: push image
#        run: docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.API_NAME }}:$GITHUB_REF_NAME-$GITHUB_RUN_ID

  deploy:
    runs-on: main-linux
    name: Deploy
    needs: build_and_push
    if: |
      always() && contains(github.ref_name, 'test-only') &&
        ((needs.build_and_push.result == 'success' && needs.tests == 'success') ||
        (needs.build_and_push.result == 'skipped' && contains(github.ref_name, 'deploy-only') && needs.tests == 'skipped'))
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      API_NAME: ${{ secrets.API_NAME }}
      DOCKER_FRONT_PROVIDER_USERNAME: ${{ secrets.DOCKER_FRONT_PROVIDER_USERNAME }}
      DOCKER_FRONT_IMAGE_NAME: ${{ secrets.DOCKER_FRONT_IMAGE_NAME }}
      DOCKER_FRONT_IMAGE_TAG: ${{ secrets.DOCKER_FRONT_IMAGE_TAG }}
      DB_ENGINE: ${{ secrets.DB_ENGINE }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_CONTAINER_PORT: ${{ secrets.DB_CONTAINER_PORT }}
      DB_HOST_PORT: ${{ secrets.DB_HOST_PORT }}
      DEBUG: ${{ secrets.DEBUG }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
      VK_OAUTH2_KEY: ${{ secrets.VK_OAUTH2_KEY }}
      VK_OAUTH2_SECRET: ${{ secrets.VK_OAUTH2_SECRET }}
      VK_OAUTH2_SCOPE: ${{ secrets.VK_OAUTH2_SCOPE }}
      TG_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Render configs
        run: |
          cd deploy
          cat docker-compose-ci.yaml | envsubst > docker-compose.yaml
          cat ci.env | envsubst > .env
      - name: Copy file via ssh-session
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
#          password: ${{ secrets.SERVER_PASSWORD }}
          key: ${{ secrets.SERVER_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          source: "deploy/docker-compose.yaml, deploy/.env, deploy/nginx.conf"
          target: "todolist_code"
          strip_components: 1
      - name: Deploy app
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
#          password: ${{ secrets.SERVER_PASSWORD }}
          key: ${{ secrets.SERVER_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            cd todolist_code
            docker compose down --rmi all --volumes
            docker system prune --all --volumes -f
            docker compose up -d
#            echo ${{ secrets.SERVER_PASSWORD }} | sudo -S docker compose down --rmi all --volumes
#            echo ${{ secrets.SERVER_PASSWORD }} | sudo -S docker system prune --all -v -f
#            echo ${{ secrets.SERVER_PASSWORD }} | sudo -S docker compose up -d
